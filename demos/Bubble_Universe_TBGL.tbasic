'
' Experiment derived from excellent code posted by Paul Dunn
'
' Use keys suggested in window title to alter the visualization
'

uses "tbgl"

function tbMain()
     
  long   n = 10
  long   n_step = 1
  single r = (2*m_pi)/235
  single x, y, u, v, t
  long   width  = 1280
  long   height = 720
  single sz, sw, sh
  byte   rgb_max = 255
  single rgb_normalizer = rgb_max/n

  ' -- Create and show window
  dWord hWnd = tbgl_createWindowEx("Bubble Universe, inspired by Paul Dunn", width, height, 32, %TBGL_WS_WINDOWED | %TBGL_WS_CLOSEBOX)
  tbgl_showWindow

  ' -- Defaults
  long  blendFlag  = false
  dword renderMode = %GL_POINTS

  tbgl_useBlend blendFlag
  tbgl_pointSize 3
    
  ' -- Main loop
  while tbgl_isWindow(hWnd) 

    tbgl_setWindowTitle(hWnd, "Bubble Universe, inspired by Paul Dunn - try F1-F6 keys, n="+format$(n)+
                              " (PageUp, PageDown), n_step="+format$(n_step)+" (Up, Down), rgb max: "+format$(rgb_Max)+
                              " (Home/End), blending: "+iif$(blendFlag, "ON", "OFF")+" (F12)")
    
    ' -- Calculations
    rgb_normalizer = rgb_max/n

    tbgl_getWindowClient(hWnd, width, height)
  
    sz = height / 480 * 200
    sw = width / sz
    sh = height / sz
    
    ' -- Rendering
    tbgl_renderMatrix2D(-sw, -sh, sw, sh)
    tbgl_clearFrame
    
      tbgl_pushStateProtect %TBGL_DEPTHMASK
      tbgl_beginpoly renderMode
        for i as long = 0 to n step n_step
          for j as long = 0 to n step n_step
            u = sin(i+v) + sin(r*i+x)
            v = cos(i+v) + cos(r*i+x)
            x = u + t
            tbgl_color i*rgb_normalizer, j*rgb_normalizer, 99*rgb_normalizer
            tbgl_vertex u, v
          next
        next
      tbgl_endPoly
      tbgl_popStateProtect
      
      t += 0.025

    tbgl_drawFrame 

    ' -- Application controls
    if tbgl_getWindowKeyState(hWnd, %VK_ESCAPE) then exit while

    if tbgl_getWindowKeyOnce(hWnd, %VK_F1)  then renderMode = %GL_POINTS
    if tbgl_getWindowKeyOnce(hWnd, %VK_F2)  then renderMode = %GL_LINES
    if tbgl_getWindowKeyOnce(hWnd, %VK_F3)  then renderMode = %GL_TRIANGLES
    if tbgl_getWindowKeyOnce(hWnd, %VK_F4)  then renderMode = %GL_POLYGON
    if tbgl_getWindowKeyOnce(hWnd, %VK_F5)  then renderMode = %GL_LINE_STRIP
    if tbgl_getWindowKeyOnce(hWnd, %VK_F6)  then renderMode = %GL_TRIANGLE_STRIP
    if tbgl_getWindowKeyOnce(hWnd, %VK_F12) then
      blendFlag = not blendFlag
      tbgl_useBlend blendFlag
    end if
    
    if tbgl_getWindowKeyOnce(hWnd, %VK_PGUP) then n       = cycle_next(n, 10, 200, 10)
    if tbgl_getWindowKeyOnce(hWnd, %VK_PGDN) then n       = cycle_prev(n, 10, 200, 10)
    
    if tbgl_getWindowKeyOnce(hWnd, %VK_HOME) then rgb_max = cycle_next(rgb_max, 10, 255, 5)
    if tbgl_getWindowKeyOnce(hWnd, %VK_END)  then rgb_max = cycle_prev(rgb_max, 10, 255, 5)

    if tbgl_getWindowKeyOnce(hWnd, %VK_UP)   then n_step  = cycle_next(n_step, 1, 20, 1)
    if tbgl_getWindowKeyOnce(hWnd, %VK_DOWN) then n_step  = cycle_prev(n_step, 1, 20, 1)
    
  wend

  tbgl_destroyWindow
end function
